#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = "${version}-${BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = "${version}"

      def devProj = "${GUID}-tasks-dev"
      def prodProj = "${GUID}-tasks-prod"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        echo "Execute Maven Build"
        sh "${mvnCmd} clean package -DskipTests"
      }

      // TBD: The next two stages should run in parallel
      stage('Execute Tests') {
        parallel (
          "Running Unit Tests": {
            echo "Running Unit Tests"

            sh "${mvnCmd} test"
          },
          "Running Code Analysis": {
            echo "Running Code Analysis"

            sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
          }
        )
      }
      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        sh "oc start-build tasks --follow --from-file=./target/openshift-tasks.war -n ${devProj}"

        echo "Tagging OpenShift container image tasks:${devTag}"

        openshiftTag alias: 'false', destStream: 'tasks', destTag: devTag, destinationNamespace: devProj, namespace: devProj, srcStream: 'tasks', srcTag: 'latest', verbose: 'false'
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding
        sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/${devProj}/tasks:${devTag} -n ${devProj}"
        sh "oc set env -n ${devProj} dc/tasks VERSION='${devTag} (tasks-dev)'"

        sh "oc delete configmap tasks-config -n ${devProj} --ignore-not-found=true"
        sh "oc create configmap tasks-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${devProj}"

        openshiftDeploy depCfg: 'tasks', namespace: devProj, verbose: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyDeployment depCfg: 'tasks', namespace: devProj, replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyService namespace: devProj, svcName: 'tasks', verbose: 'false'
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${devProj}/tasks:${devTag} docker://nexus3.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"

        echo "Tag the built image with the production tag."
        openshiftTag alias: 'false', destStream: 'tasks', destTag: prodTag, destinationNamespace: devProj, namespace: devProj, srcStream: 'tasks', srcTag: devTag, verbose: 'false'
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        echo "Determine which application is active"

        activeApp = sh(returnStdout: true, script: "oc get route tasks -n ${prodProj} -o jsonpath='{ .spec.to.name }'").trim()
        if (activeApp == "tasks-green") {
          destApp = "tasks-blue"
        }
        echo "Active Application:      " + activeApp
        echo "Destination Application: " + destApp
        
        //      Set Image, Set VERSION
        echo "Set Image, Set VERSION"
        sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${devProj}/tasks:${prodTag} -n ${prodProj}"
        sh "oc set env -n ${prodProj} dc/${destApp} VERSION='${prodTag} (${destApp})'"

        //      Deploy into the other application

        // Update the Config Map which contains the users for the Tasks application
        echo "Deploy into the other application"
        sh "oc delete configmap ${destApp}-config -n ${prodProj} --ignore-not-found=true"
        sh "oc create configmap ${destApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${prodProj}"

        openshiftDeploy depCfg: destApp, namespace: prodProj, verbose: 'false', waitTime: '', waitUnit: 'sec'
        

        //      Make sure the application is running and ready before proceeding
        echo "Verifying application is ready"
        openshiftVerifyDeployment depCfg: destApp, namespace: prodProj, replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
        openshiftVerifyService namespace: prodProj, svcName: destApp, verbose: 'false'
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        
        //sh "oc patch route tasks -n ${prodProj} -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\'" 
        sh "oc patch route tasks -n ${prodProj} -p '{\"spec\":{\"to\":{\"name\":\"${destApp}\"}}}'"
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}